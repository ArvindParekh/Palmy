// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())

  name  String
  email String @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  folders       Palmlet_Folder[]
  @@map("user")
}

model Palmlet_Folder {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  folderName String
  folderDescription String?

  palmlets Palmlet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, folderName])
}

model Palmlet {
  id String @id @default(uuid())

  folderId String
  folder   Palmlet_Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  title   String
  content String?

  tags      Palmlet_Tag[]
  variables Palmlet_Variable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([folderId, title])
}

model Palmlet_Tag {
  id String @id @default(uuid())

  palmlets Palmlet[]

  tagName String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Palmlet_Variable {
  id String @id @default(uuid())

  palmlets Palmlet[]

  variableName String @unique
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
